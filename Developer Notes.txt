Pinscape Config Tool - Notes for Developers
===========================================


1. Build system setup

To set up the build environment, you'll need:

* Microsoft Visual Studio.  You can download the free Community
Edition from the Microsoft Web site.  I don't think any special
install options are required.  I'm currently building this
project with VS 2013, which is an older version, but it will
happily co-exist on your system alongside newer versions.  To
get VS 2013, go here:

https://visualstudio.microsoft.com/vs/older-downloads/

and then select 2013 from the version list and proceed to the
download.  See Visual Studio Versions below for more on using
a newer VS update if you prefer.

If you want to create binary releases using the MakeRelease.bat
script, you'll also need a command-line ZIP tool.  I use Info-ZIP
(infozip.sourceforge.net).  You can *probably* use a different ZIP
tool if you prefer, as long as it has a command-line mode with its
primary command named ZIP.EXE, since most ZIP tools happen to use
similar command-line syntax.  If you have any problems, though, you
might try installing Info-ZIP and seeing if that helps.


2. Building the program

Open the solution (.sln) file in Visual Studio.  Go to the top
menu and select Build > Build Solution.


3. Visual Studio versions

As of this writing (9/2020), I'm building with Visual Studio 2013.
That's quite out of date at this point, but you can still download it
from the Microsoft site:

https://visualstudio.microsoft.com/vs/older-downloads/

You can also try building from a newer VS version if you prefer.  I
don't expect any significant problems migrating to newer versions,
since C# is usually pretty forward-compatible across versions.
However, there are often a few small changes needed when moving across
VS updates, and these can sometimes be quite subtle and require some
effort to figure out the *correct* fix.  If you don't know what you're
doing, attempting a fix that just "shuts up the compiler" and gets it
to compile can also often make the program stop working.

So: If you're an experienced developer, and you like messing with that
stuff, feel free to try VS 2019 or whatever other version you like.
However, if you just want to get it built without a lot of fuss and
without worrying about whether there are going to be hidden gotchas in
the built copy, use VS 2013.

If you *do* do decide to try it with a newer VS version, you should be
able to simply open the solution (.sln) file without any changes.
However, VS sometimes requires a one-way format update to open an old
project in a new VS version, and this conversion will render the
solution (.sln) and/or project (.csproj) files incompatible with the
original VS 2013.  If this type of one-way conversion is necessary, VS
*should* show you a warning message.  If VS shows such a warning when
you open the project, CANCEL and use this procedure instead:

  - Whatever you do, DON'T migrate the ORIGINAL project/solution 
    files

  - Instead, create COPIES of the project/solution files that need
    to be converted

  - Name the copies to indicate the new VS version they'll be used
    with: e.g., copy PinscapeConfigTool.sln and name the copy 
    PinscapeConfigTool-vs2019.sln

  - Open the NEW COPIES in the new VS, and allow VS to convert
    those to the new format

  - Use "git add" to add the new solution/project files to the
    git repos

  - If you have to make any project changes (e.g., adding new
    source files to the project), please keep the ORIGINAL project/
    solution files in sync with any project-level changes you have
    to make, by manually back-porting the changes to the original
    project/solution files.  This is usually straightforward, since
    the VS files in question are mostly XML, which makes them easy
    easy to 'diff' and edit by hand.

If you run into the VS upgrade issue, and you're planning to make
changes that require adding new files to the build or otherwise
changing the project/solution trees, you might want to stop what
you're doing and either (a) go back to the VS version I'm using, so
that you don't have to do the conversion in the first place, or (b)
contact me before proceeding, to see if we can coordinate the VS
version migration on the mainline instead.  Either way, you won't have
to deal with keeping two versions of the project files in sync.
That's tedious and error-prone.

My reason for keeping the project on the old VS version is NOT that
it's hard to do a version migration; it's that a migration can
destabilize the build in ways that aren't obvious.  After a VS version
migration, it's important to do a full test of all features to make
sure that nothing in the program's run-time behavior changed or broke
due to the build process change.  Staying on the same VS version gives
me more confidence that there won't be any new bugs or regressions
introduced by a small code change.


4. Config Tool HTML pages

The Config Tool uses an embedded HTML renderer control to display HTML
pages.  Everything in the main window is displayed that way.  The same
goes for the help system.  Most of the other dialog windows use
Windows Forms (the C# dialog layout system) with native controls; it
should be obvious which windows are HTML and which are native by
looking at the [Design] mode of the form layouts for the various
window class .cs files.

For the HTML-based screens, the .htm source files and related
resources (.css, .js, .png, etc) are in the PinscapeConfigTool\html
subfolder.


5. Adding new HTML files and new HTML resources

If you want to add any new HTML pages, or new resources for the
HTML pages, such as new .png or .jpg images to show in the HTML
windows, follow this procedure:

  - Create each new file in the PinscapeConfigTool\html folder

  - Add the file to the git repository via "git add <file>" (git
    has to be told explicitly that new files go in the repos; it
    won't assume this on its own)

  - Add the file to the Visual Studio project:

    - Open the project in VS
    - In the Solution Explorer pane, find PinscapeConfigTool > html
    - Right click on the html folder and select Add > Existing Item
    - Select the file(s) to add
    - Click Add to accept the file selection
    - The new files will now appear under the html folder in the tree;
      for each one:
      
      - Click on the file to select it into the Properties pane
      - In the Properties pane, set the value of "Copy to Output 
        Directory" to "Copy if Newer"

Be sure to exit out of Visual Studio before committing the git
changes, to ensure that VS has finished writing out all changes to the
project files.

