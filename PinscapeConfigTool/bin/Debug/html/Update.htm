<!DOCTYPE html>
<html>
<head>
   <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
   <link rel="stylesheet" href="main.css"/>
   <title>Pinscape Controller Setup</title>
</head
<body>

<script type="text/javascript" src="jquery-1.12.1.js"></script>
<script type="text/javascript" src="util.js"></script>

<h1>
   <img src="h1UpdateFirmware.png" style="vertical-align: middle; float: right;">
   Firmware Update
   <img src="h1UpdateFirmware.png" style="vertical-align: middle; visibility: hidden;">
</h1>

<div>

   <div>
      This lets you install a new version of the Pinscape firmware onto your KL25Z,
      preserving your current configuration settings.
   </div>

   <hr>

   <div>
      <b>Pinscape Unit <span id="psUnitNo"></span></b>
      | KL25Z CPU ID <span id="CPUID"></span>
      | OpenSDA ID <span id="OpenSDAID"></span>
   </div>
   <div>
      Currently installed firmware build: <span id="BuildID"></span>
   </div>

   <hr>

   <div id="Step1" class="flowStep">
      <h2>Step 1: Select a firmware version to install</h2>

      <div>
         <div>
            <a id="showDocs" href="#"><img class="fileIcon" src="dlFolderIcon.png">Pinscape Downloads</a>:
         </div>
         
         <div id="binFiles">
         </div>
         <div id="noBinFiles">
            (No firmware versions have been downloaded)
         </div>
         
         <div>
            <a href="#" id="browseForBin">Browse for a file</a>
         </div>
      </div>

      <div>
         File selected: <span id="binToInstall"></span>
      </div>
   </div>

   <div id="Step2" class="flowStep">
      <h2>Step 2: Save current settings</h2>
      <div>
         Before proceeding, we'll save the current configuration settings
         on this KL25Z so that they can be restored after the firmware update.

         <div class="instructions" style="display: none;">
            <img src="kl25z-how-to-plug-in.png" style="float: right;">
            Please make sure the KL25Z is plugged in via the <b>joystick</b> port,
            as shown at right.  This will allow reading the current configuration
            settings for backup.
         </div>
         <div class="working" style="display: none;">
            Saving settings to disk...
         </div>
         <div id="backupError">
         </div>
      </div>
      <div>
         Saved to <span class="backupFilename"></span>
      </div>
   </div>

   <div id="Step3" class="flowStep">
      <h2>Step 3: Plug in programming port</h2>

      <div>
         <div>
            <img src="kl25z-how-to-plug-in-prog.png" style="float: right;">
            We're ready to install the new firmware.  Please make sure the
            <b>programming port</b> on the KL25Z is plugged in, as shown in
            the diagram at right.  If everything's okay, the small green LED
            next to the programming port should be on (not flashing).  If
            the green LED is flashing, try unplugging all cables from the
            device for a few seconds, then plug the programming port back in.
         </div>
         <div>
            It's fine to leave both ports plugged in throughout the update.
            But if you only have one cable, simply unplug the
            joystick port now and move the cable over to the programming port.
         </div>
         <div id="SDADriveList">
            The software should detect the drive when you plug it in and
            automatically advance to the next step.  If these instructions are
            still showing, the software hasn't detected the port yet.
            <a href="#" id="browseForSDA">Select the drive manually</a>
         </div>
         <div id="multiDriveWarning">
            <b>Warning:</b> it looks like more than one KL25Z programming port
            is plugged in. If you know which one is which, you can click on
            it in the list above - but if there's any doubt, the easiest way to
            clear it up is to make sure that the only one plugged in is the
            one you want to program.
         </div>
      </div>
      <div>
         Programming drive: (<span id="OpenSDADrive"></span>)
      </div>
   </div>

   <div id="Step4" class="flowStep">
      <h2>Step 4: Install firmware</h2>
      <div>
         We're ready to go!
         <a href="#" id="installGo">Install now</a>
      </div>
      <div>
         Firmware updated!
      </div>
   </div>

   <div id="Step5" class="flowStep">
      <h2>Step 5: Plug in joystick port</h2>
      <div>
         <img src="kl25z-how-to-plug-in.png" style="float: right;">
         The new firmware has been installed, so we're ready to restore
         your configuration settings.  Please make sure the KL25Z is plugged in
         via the <b>joystick</b> port, as shown at right.
         <div>
            If you moved your USB cable over to the programming port for the
            previous step, you can now unplug it and move it back to the
            joystick port.  It's also okay to leave both ports plugged in.
         </div>
      </div>
      <div>
         Done
      </div>
   </div>

   <div id="Step6" class="flowStep">
      <h2>Step 6: Restore settings</h2>
      <div id="restoreError">
         Restoring settings from <span class="backupFilename"></span>...
      </div>
      <div id="restoreMessage">
         Settings restored
      </div>
   </div>

   <div id="Step7" class="flowStep">
      <h2>Done!</h2>

      <div>
         The firmware update was successfully completed.
      </div>
   </div>

</div>

<div id="navproxy"></div>
<div id="nav">
   <div class="left">
      <a class="iconButton" href="top.htm" id="mainMenuButton" title="Return to the main menu"><img src="homeIcon.png"></a>
   </div>
   <div class="navSpacer">
   </div>
</div>

<script>
var CPUID;
var OpenSDAID, OpenSDADrive;
var preselectedBin;
var backupFile;
$(function()
{
    // look for the CPUID in the parameters
    if (/[?&]ID=([\da-f\-]+)/i.test(window.location.href))
    {
        // set the visible CPU ID 
        CPUID = RegExp.$1;
        initFields();
    }

    function initFields()
    {
        // store the CPUID 
        $("#CPUID").text(CPUID);

        // look up the Pinscape unit number for display as well
        var info = eval(window.external.GetDeviceInfo(CPUID)
                        || { PinscapeUnitNum: "Unknown", BuildID: "Unknown" });

        // if the SDA ID is 0000-00000000-00000000, the .bin file was never
        // patched, so the ID is unknown
        OpenSDAID = info.OpenSDAID;
        if (OpenSDAID == "0000-00000000-00000000") 
            OpenSDAID = null;

        // display the device information
        $("#psUnitNo").text(info.PinscapeUnitNum);
        $("#BuildID").text(info.BuildID);
        $("#OpenSDAID").text(OpenSDAID || "Unknown");
    }

    // presume the firmware won't be patched with config data using the
    // host-loaded config mechanism in the newer (Feb 2017) firmware
    var configStored = false;

    // step entry procedures
    var steps = {
        // Step 1 - select the .bin file
        1: function(step)
        {
            // initialize the .bin file list, then update it periodically
            updateBinFiles();
            var updater = setInterval(updateBinFiles, 2000);

            // update the file list
            function updateBinFiles()
            {
                // get the new file list
                var l = eval(window.external.ListBinFiles());
                
		// check for a pre-selected bin file
		if (/[?&]vsn=(\d\d\d\d-\d\d-\d\d-\d\d\d\d)/.test(window.location.href))
		{
		    // search the list for a match to the selection
		    var preSel = RegExp.$1;
		    for (var i = 0 ; i < l.length ; ++i)
		    {
			if (l[i].indexOf(preSel) >= 0)
			{
			    setBinFile(l[i]);
			    return;
			}
		    }
		}
            
                // Sort by descending filename (excluding path and extension).
                // Descending order puts the most recent build at the top of the
                // list.  We'll usually want to select the latest version, so it's
                // the logical one to put first.
                l.sort(function(a, b) { return -strcmp(filename(a), filename(b)); });
                function filename(f) { return filenameAndExt(f).replace(/\.[^.]*$/, ""); }
                function filenameAndExt(f) { return f.replace(/^.*\\/, ""); }
                function strcmp(a, b) { return a.localeCompare(b); }

                // sync the live file list and displayed html
                for (var i = 0, h = $("#binFiles div").first() ; i < l.length || h.length ; )
                {
                    // if the current live and display lists match, skip both entries,
                    // otherwise insert or delete a display item to sync the lists
                    var li = i < l.length ? l[i] : null;
                    if (li && h.length && li == h.data("filename"))
                    {
                        // they match - skip to the next entry in each list
                        ++i;
                        h = h.next();
                    }
                    else if (!li || (h.length && h.data("filename").localeCompare(li) > 0))
                    {
                        // we're out of live items, or the current display item sorts before
                        // the current live item: this display item is obsolete, so delete it
                        var nxt = h.next();
                        h.remove();
                        h = nxt;
                    }
                    else
                    {
                        // the current live item is new - insert a display item for it
                        var newitem = $("<div/>").data("filename", li).append(
                            $("<a/>").attr("href", "#").append(
                                $("<img src=\"binfileIcon.png\">"),
                                $("<span>").text(filename(li))));
                        if (h.length)
                            h.before(newitem);
                        else
                            $("#binFiles").append(newitem);
                        ++i;
                    }
                }

                // show or hide the "no files" section according to whether we have files
                $("#noBinFiles").toggle(l.length == 0);
                
                // attach click handlers to the files
                $("#binFiles a").off("click").click(function(ev) {
                    ev.preventDefault();
                    setBinFile($(this).parent().data("filename"));
                });
            }
            
            // browse for a .bin file
            $("#browseForBin").click(function() {
                var f = window.external.BrowseForFile("bin");
                if (f)
                    setBinFile(f);
            });
            
            // open the Documents folder
            $("#showDocs").click(function(ev) {
                ev.preventDefault();
                window.external.ShowDocsFolder();
            });

            // set the .bin file and advance to step 2
            function setBinFile(f)
            {
                binToInstall = f;
                $("#binToInstall").text(f);
                nextStep();
            }

            // on ending the step, stop the .bin file updater
            return function() { clearInterval(updater); };
        },

        // Step 2 - save the device configuration.  Wait for the device to
        // connect.  Once it's ready, save the config and move on.
        2: function(step)
        {
            // check if we're ready
            function check()
            {
                // ignore if we've already moved on to the next step
                if (curStep != 2)
                    return;
                
                // Look up our device information to see if we're connected.
                if (window.external.IsDevicePresent(CPUID))
                {
                    // the device is ready - show feedback
                    step.find(".instructions").css("display", "none");
                    step.find(".working").css("display", "block");
                        
                    // save the configuration - do it in a timeout to allow a UI update first
                    setTimeout(function() {
                        var stat = eval(window.external.SaveDeviceConfig(CPUID, "backup"));
                        if (stat.status == "ok") {
                            $(".backupFilename").text(stat.filename);
                            backupFile = stat.filename;
                            nextStep();
                        }
                        else
                            $("#backupError").text("Unable to back up current settings: " + stat.message);
                    }, 1);
                }
                else
                {
                    // show the instructions for plugging in the port
                    step.find(".working").css("display", "none");
                    step.find(".instructions").css("display", "block");
                        
                    // check again in a few moments
                    setTimeout(check, 2000);
                }
            }

            // run the initial check
            setTimeout(check, 0);
        },

        3: function(step)
        {
            // hide the multi-drive warning initially, since we're not showing
            // a drive list initially
            $("#multiDriveWarning").hide();
    
            // set the drive and proceed to the next step
            function setDrive(path)
            {
                OpenSDADrive = path;
                $("#OpenSDADrive").text(path);
                nextStep();
            }
    
            // check to see if the OpenSDA drive for this device is ready
            function check()
            {
                // ignore if we've already moved to the next step
                if (curStep != 3)
                    return;
    
                // look up the SDA drive
                var d = window.external.FindSDADrive(OpenSDAID);
                if (d)
                {
                    // it's ready - advance to the next step
                    setDrive(eval(d).path);
                }
                else
                {
                    // not ready - check again in a few moments
                    setTimeout(check, 2000);
                }
            }

            // run the initial check
            setTimeout(check, 0);

            // browse for the SDA drive
            var updater;
            $("#browseForSDA").click(function(ev)
            {
                ev.preventDefault();
                
                $("#SDADriveList").html(
                    "<b>Select a drive manually:</b> "
                    + (OpenSDAID ?
                       "Here's a list of KL25Z drives currently plugged in." :
                       "The firwmare currently installed doesn't have any information on "
                       + "the OpenSDA (programming port) ID.  This means the software won't "
                       + "be able to recognize the drive automatically.  You'll have to "
                       + "select the drive manually from the list below.")
                    + "<div>"
                    +   "<div class=\"nosdadrive\">(No FRDM-KL25Z programming drives are currently detected.)</div>"
                    + "</div>");

                // update the SDA drive list
                function update()
                {
                    var drives = eval(window.external.AllSDADrives(false));
                    drives.sort(function(a, b) { return a.path.localeCompare(b.path); });
                    var h = $("#SDADriveList .sdadrive").first();
                    for (var i = 0 ; i < drives.length || h.length ; )
                    {
                        // if the current items match, move on, otherwise sync the lists
                        var d = i < drives.length ? drives[i] : null;
                        if (d && h.length && d.path == h.data("path"))
                        {
                            // they're the same - move to the next on each list
                            ++i;
                            h = h.next();
                        }
                        else if (!d || (h.length && h.data("path").localeCompare(d.path) < 0))
                        {
                            // we're out of new drives, or this old drive sorts before this
                            // new drive: this old drive is no longer present, so delete it
                            var nxt = h.next();
                            h.remove();
                            h = nxt;
                        }
                        else
                        {
                            // otherwise, the new drive must be new, so insert it before the
                            // current item (or at the end of the list if there's no current item)
                            var newitem = $("<div/>").addClass("sdadrive").data("path", d.path).html(
                                "<a href=\"#\">"
                                + "<img src=\"kl25zDiskIcon.png\">"
                                + "<b>" + d.path.htmlify() + "</b>"
                                + " (" + d.volumeLabel.htmlify() + ")"
                                + " | OpenSDA ID " + d.sdaid.htmlify()
                                + "</a>");
                            if (h.length)
                                h.before(newitem);
                            else
                                $("#SDADriveList > div").append(newitem);
                            ++i;
                        }
                        $("#SDADriveList .nosdadrive").css("display", drives.length ? "none" : "");
                    }

                    // show or hide the multi-drive warning
                    $("#multiDriveWarning").toggle(drives.length > 1);
                
                    // refresh the handlers
                    $("#SDADriveList a").off("click").click(function(ev) {
                        ev.preventDefault();
                        setDrive($(this).parents(".sdadrive").data("path"));
                    });
                }

                // update immediately, and then refresh periodically
                update();
                updater = setInterval(update, 2000);
            });

            // if the SDA ID is unknown, go directly to manual selection mode
            if (!OpenSDAID)
                $("#browseForSDA").click();
        
            // on ending the step, cancel the SDA drive updater
            return function() { if (updater) clearInterval(updater); };
        },

        4: function(step)
        {
            // install the firmware
            var div = step.children("div").first();
            $("#installGo").click(function(ev) { install(ev, $(this)); });

            function install(ev, self)
            {
                ev.preventDefault();
                div.html("Installing firmware...");
                self.off("click");
                
                setTimeout(function()
                {
                    var stat = eval(window.external.InstallFirmware(OpenSDADrive, binToInstall, CPUID));
                    if (stat.status == "ok")
                    {
                        // success - note if we stored the config, and proceed to the next step
                        configStored = stat.configStored;
                        nextStep();
                    }
                    else
                    {
                        div.html(
                            "<div>Firmware install failed: " + stat.message.htmlify() + "</div>"
                            + "<div><a href='#' id='retryFirmware'>Try again</a>");
                        $("#retryFirmware").off("click").click(function(ev) { install(ev, $(this)); });
                    }
                }, 100);
            }
        },

        5: function(step)
        {
            // check if we're ready
            function check()
            {
                // stop if we've already moved on
                if (curStep != 5)
                    return;
    
                // look up our device information to see if we're connected
                if (window.external.IsDevicePresent(CPUID))
                {
                    // it's ready - move on to the next step
                    nextStep();
                }
                else
                {
                    // check again in a few moments
                    setTimeout(check, 2000);
                }
            }

            // run the initial check
            setTimeout(check, 0);
        },

        6: function(step)
        {
            // restore settings
            setTimeout(doRestore, 0);
            function doRestore()
            {
                // if we restored settings using the host-loaded configuration, skip
                // this step
                if (configStored)
                {
                    $("#restoreMessage").html(
                        "Settings restored (embedded in firmware binary)");
                    nextStep();
                    return;
                }
    
                // restore the settings
                var stat = eval(window.external.RestoreDeviceConfig(CPUID, "backup"));
                if (stat.status == "ok") {
                    nextStep();
                }
                else {
                    $("#restoreError").html(
                        "<div>Unable to restore settings: " + stat.message.htmlify() + "</div>"
                        + "<div>Your old settings were backed up to " + backupFile.htmlify()
                        + ", so you can try to correct the problem and manually restore "
                        + "the file later.  <a href='#' id='retryRestore'>Try again now</a>");
                    $("#retryRestore").off("click").click(function(ev) {
                        ev.preventDefault();
                        $(this).off("click");
                        $("#restoreError").html("Trying to restore settings from " + backupFile.htmlify() + "...");
                        setTimeout(doRestore, 100);
                    });
                }
            }
        },

        7: function(step)
        {
            // reinitialize the device information fields
            initFields();
        }
    };
    
    // set up the workflow items
    $(".flowStep h2").prepend("<span class=\"checkmark\">&#10003;</span>");

    // advance to the given step in the workflow
    var curStep = 0, curStepEnder;
    function nextStep()
    {
        step(curStep+1);
    }
    function step(n)
    {
        // get the previous and next step divs
        var prv = $("#Step" + (n-1));
        var nxt = $("#Step" + n);

        // mark the previous div as done
        prv.addClass("done");

        // show the next div and make sure it's in view
        nxt.css("display", "block");
        scrollIntoView(nxt, 250);

        // remember the new current step
        curStep = n;

        // carry out the last step's end procedure
        if (curStepEnder)
            curStepEnder();

        // carry out the step n entry procedure
        curStepEnder = (steps[n] || function() { })(nxt);
    }

    // enter step 1
    step(1);
});

</script>


</body>
</html>
