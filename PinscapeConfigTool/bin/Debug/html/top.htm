<!DOCTYPE html>
<html>
<head>
   <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
   <link rel="stylesheet" href="main.css"/>
   <title>Pinscape Controller Setup</title>
</head>

<body>

<script type="text/javascript" src="jquery-1.12.1.js"></script>
<script type="text/javascript" src="util.js"></script>


<h1>
   <img src="h1logo.png" style="float: right;">
   Main Menu
   <img src="h1logo.png" style="vertical-align: middle; visibility: hidden;">
</h1>

<div>

   <div>
      <b>Welcome!  This program helps you set up and configure your
         Pinscape Controller units.</b>
      
      <div class="programUpdateNotice headlineBox">
         An updated version of this program is available -
         <a href="#" class="installProgramUpdate">Install Now</a>
      </div>
   </div>

   <script type="text/javascript">

// Check for program updates
var latestFirmwareVsn;
function checkForUpdates()
{
    // check for updates to the config tool
	var ctu = window.external.checkForProgramUpdates();
	$("div.programUpdateNotice").toggle(ctu);
	$("#configToolUpToDate").toggle(!ctu);

    // get the latest firmware version available
    var bin = window.external.LatestBinFile();
    if (/\d\d\d\d-\d\d-\d\d-\d\d\d\d/.test(bin))
    {
        latestFirmwareVsn = RegExp.lastMatch;
        updateFirmwareNotices();
    }
}

// update firmware notices in the device list
function updateFirmwareNotices()
{
	var updateCount = 0;
    $("#devlist .firmwareUpdateNotice").each(function()
    {
        var self = $(this);
        var curvsn = self.data("curbuildid");
        if (latestFirmwareVsn && latestFirmwareVsn > curvsn)
        {
			++updateCount;
            self.show();
            self.html("A newer version of the firmware is available (" + latestFirmwareVsn + ") - "
                      + "<a href=\"Update.htm?ID=" + self.data("cpuid")
                      + "&vsn=" + latestFirmwareVsn + "\">Install</a>");
        }
        else
            self.hide();
    });

	if (updateCount == 0)
		$("#firmwareUpdateNotice span").html("<span class=\"upToDate\">Up to date</span>");
	else
		$("#firmwareUpdateNotice span").html("<span class=\"newVersion\">Update available - see the device list above</span>");
}

$(".installProgramUpdate").click(function(ev) {
    ev.preventDefault();
    if (!window.external.InstallProgramUpdate()) {
		$(this).parents(".programUpdateNotice").html(
            "Sorry, but an error occurred trying to launch the installer "
            + "update.  You might need to install it manually.  You can "
            + "find the update ZIP file in the "
            + "<a href=\"javascript:window.external.ShowDocsFolder();\">"
            + "Pinscape downloads folder</a>.  Be sure to close this "
            + "program first.");
    }
});

// check for updates on page load
$(checkForUpdates);
      
   </script>

   <hr>

   <div id="devlist" style="margin: 2em 0px;">
      <div class="working">(Searching for devices...)</div>
   </div>

   <hr>

   <div>
      <img style="float: right; margin: 0px 1em 1em 2em;" src="kl25z-how-to-plug-in.png">
      To connect a controller that you've already set up, plug a USB
      cable into the <b>joystick</b> port on the KL25Z as shown at right,
      and plug the other end into a free USB port on your PC.
   </div>

   <div>
      (The other USB connector on the KL25Z is the <b>programming</b> port,
      which is used for installing and updating the firmware.  It's fine
      to leave both ports plugged in, but if you only have one cable, connect
      it to the joystick port during normal use.)
   </div>
   
   <div style="clear: both;">
   </div>
   
   <hr>

   <div class="twocol">
      <div>
         <a class="button iconic" href="SetupNew.htm"><img src="btnSetupNew.png"></a>
      </div>
      <div>
         <div>
            <b><a href="SetupNew.htm" class="silent">Set up a new KL25Z</a></b>
         </div>
         <div>
            If you have a new KL25Z, this will lead you through the
            steps to prepare it for use and install the Pinscape firmware.
         </div>
      </div>
   </div>

   <hr>

   <div>
      <b>Software updates</b> 
      <span style="padding-left: 1em;">
         <label><input type="checkbox" id="ckAutoDownload"> Enable auto download</label>
      </span>
      <span style="padding-left: 1em;">
         <a href="#" id="showDocs" style="text-decoration: underline;">View downloads folder</a>
      </span>
      <a href="#" class="shower">More...</a>
      
      <div class="hider">
         The setup tool can automatically check for and download updates each time you run it.
         If this feature is enabled, updates to the setup tool and firmware will be downloaded
         automatically.  You'll be notified when new updates are ready to install.
      </div>
      
      <div id="autoUpdateStatus">
		 Download status: <span>Initializing</span>
         <a id="autoUpdateRetry" href="#">Check again</a>
         | <a href="http://www.mjrnet.org/pinscape/swversions.php" target="_blank">Check manually</a>
      </div>
	  <div class="programUpdateNotice">
		 Config tool:
		 <span class="newVersion">
			Update available - <a href="#" class="installProgramUpdate">Install Now</a>
		 </span>
	  </div>
	  <div id="configToolUpToDate">
		 Config tool: <span class="upToDate">Up to date</span>
	  </div>
	  <div id="firmwareUpdateNotice">
		 Firmware: <span>Checking</span>
	  </div>
   </div>
   
   <hr>

   <div>
      <b>Miscellaneous</b>
      <div>
         <a href="#" id="restoreHiddenDialogs">Restore hidden dialogs</a> <a class="shower" href="#">[?]</a>
         <div class="hider">
            Some warning dialogs offer a checkbox saying "Don't show me this message again", in
            case you're tired of seeing the same advice over and over.  This button un-checks
            all of those checkboxes so that the dialogs will appear again when appropriate.
         </div>
      </div>
      <div>
         <a href="dofR3.htm">Important DOF &amp; LEDWIZ.DLL updates</a>
      </div>
   </div>

   <hr>

   <div>
      <b>About this project</b> <a id="aboutShower" href="#" class="shower">More...</a>
      <div class="hider">
         <div>
            This is build <span id="buildNo"></span> of the Config Tool.
         <div>
            The Pinscape Controller is a free, open-source software and hardware
            project.  You can find the source code, documentation, and more on our
            <a href="https://developer.mbed.org/users/mjr/code/Pinscape_Controller_V2/" target="_blank">
               mbed.org project page</a>.
         </div>
      </div>
   </div>

</div>

<script>
$(function() {
    var bi = eval(window.external.GetBuildInfo());
    $("#buildNo").text(bi.BuildNumber + " (" + bi.Date + ")");
});
</script>

<!-- Loading overlay screen --------------------------------------------->
<div class="windowCover">
   <div class="windowCoverSemi"></div>
   <div id="loadingOverlay">
      <div>
         <div>
            <div>
               Loading...
            </div>
         </div>
      </div>
   </div>
</div>


<script type="text/javascript">


// page initialization
$(function()
{
    // display the current list
    var showDevList = function(devlist)
    {
        div = $("#devlist");
        if (devlist.length == 0)
        {
            // no devices - say so instead of displaying an empty list area
            div.html("No Pinscape Controller devices are currently connected.");
        }
        else
        {
            // run through each device and build the HTML section for each
            var l = [];
            for (var i = 0 ; i < devlist.length ; ++i)
            {
                // get this device data
                var d = devlist[i];

                // if the plunger is enabled, show the plunger config button
                var plungerButton = "";
                if (d.PlungerEnabled)
                    plungerButton = "<a class=\"tbButton\" href=\"http://ps/PlungerConfig?ID=" + d.CPUID
                                    + "\" title=\"View live data from the plunger sensor and run calibration\">"
                                    + "<img src=\"tbPlunger.png\"><br>Plunger</a> ";

                // joystick data viewer
                var joystickButton = "";
                if (d.JoystickEnabled)
                    joystickButton = "<a class=\"tbButton\" href=\"http://ps/JoystickViewer?ID=" + d.CPUID
                                     + "\" title=\"View live USB joystick input\">"
                                     + "<img src=\"tbJoystick.png\"><br>Joystick</a> ";

                // TV ON tester
                var tvOnButton = "";
                if (d.TvOnEnabled)
                    tvOnButton = "<a class=\"tbButton\" href=\"http://ps/TvOnTester?ID=" + d.CPUID
                                 + "\" title=\"Test the TV ON relay\">"
                                 + "<img src=\"tbTVON.png\"><br>TV Relay</a>";

                // button tester
                var buttonTesterButton =
                    "<a class=\"tbButton\" href=\"http://ps/ButtonTester?ID=" + d.CPUID
                    + "\" title=\"Test input button wiring\">"
                    + "<img src=\"tbButton.png\"><br>Buttons</a>";

                // output tester - TO DO
                var outputTesterButton = "";
                outputTesterButton = "<a class=\"tbButton\" href=\"http://ps/OutputTester?ID=" + d.CPUID
                                     + "\" title=\"Test output ports\">"
                                     + "<img src=\"tbOutputTester.png\"><br>Outputs</a> ";

                // note if there's an LedWiz unit number
                var ledWizUnit, altLedWizUnit;
                if (d.LedWizUnitNum != 0) {
                    altLedWizUnit = "LedWiz Unit #" + d.LedWizUnitNum;
                    ledWizUnit = " | " + altLedWizUnit;
                }
                else {
                    ledWizUnit = "";
                    altLedWizUnit = "USB VID " + d.USBVendorID + "/PID " + d.USBProductID;
                }

                // set up the header
                var hdr = "<div class=\"devlistitem " + ["first","second","third","fourth"][i&3] + "\">";

                // check the USB product version to ensure it's compatible with this setup tool version
                if (d.USBVersion >= 10)
                {
                    // modern firmware - add this entry with full controls
                    l.push(hdr
                           + "<b>Pinscape Unit #" + d.PinscapeUnitNum + "</b> "
                           + ledWizUnit
                           + " | CPU ID " + d.CPUID
                           + " | Firmware " + d.BuildID
                           + "<div class=\"firmwareUpdateNotice\" data-curbuildid=\"" + d.BuildID
                           +      "\" data-cpuid=\"" + d.CPUID + "\"></div>"
                           + "<div class=\"diagnosticData\" data-cpuid=\"" + d.CPUID + "\" style=\"display:none;\">"
                           +    "<span></span>"
                           +    "<a href='#'>Refresh</a>"
                           + "</div>"
                           + "<div>"
                           +   "<div>"
                           +     "<div class=\"devBtnGroup\">"
                           +        "<a class=\"tbButton configureButton\" href=\"Configure.htm?ID=" + d.CPUID
                           +          "\" title=\"View or set this unit's options and hardware configuration\">"
                           +          "<img src=\"tbSettings.png\"><br>Settings</a> "
                           +        "<a class=\"tbButton\" href=\"BackupRestore.htm?ID=" + d.CPUID
                           +          "\" title=\"Back up or restore this unit's settings to/from a file on your PC\">"
                           +          "<img src=\"tbBackupRestore.png\"><br>Backup</a> "
                           +        "<a class=\"tbButton\" href=\"Update.htm?ID=" + d.CPUID
                           +          "\" title=\"Install a new Pinscape Controller firmware version on this unit\">"
                           +          "<img src=\"tbUpdateFirmware.png\"><br>Update</a> "
                           +     "</div>"
                           +     "<div class=\"devBtnGroup\">"
                           +        plungerButton
                           +        joystickButton
                           +        tvOnButton
                           +        buttonTesterButton
                           +        outputTesterButton
                           +     "</div>"
                           +  "</div>"
                           + "</div>"
                           + "</div>");
                }
                else
                {
                    // old firmware - the only action possible is updating the firmware
                    l.push(hdr
                           + altLedWizUnit
                           + " | <a href=\"#\" class=\"oldFirmwareVersion\">Old firmware version</a>"
                           + "<div>"
                           +   "<div>"
                           +     "<div class=\"devBtnGroup\">"
                           +       "<a class=\"button\" href=\"Install.htm\" "
                           +          "title=\"Install a new Pinscape Controller firmware version on this unit\">"
                           +          "Update Firmware</a> "
                           +     "</div>"
                           +   "</div>"
                           + "</div>"
                           + "</div>");
                }
            }

            // show the list
            div.html("Here are the controllers currently connected:"
                     + "<div id=\"devlistmain\">"
                     + l.join("")
                     + "</div>");
        }

        // set handlers for the "old firmware version" links, if any
        $("a.oldFirmwareVersion").off("click").click(function(ev) {
            ev.preventDefault();
            alert("This KL25Z has an older version of the Pinscape Controller firmware "
                  + "installed. The installed firmware isn't compatible with this "
                  + "version of the setup tool. If you wish to continue using the "
                  + "installed firmware version, simply close this program and run the "
                  + "matching older version of the setup tool to view and configure "
                  + "this controller.");
        });

        // set handlers for the Configure buttons
        $("a.configureButton").off("click").click(function(ev) {
            ev.preventDefault();
            $("#loadingOverlay").parent().show();
            var href = $(this).attr("href");
            setTimeout(function() { window.navigate(href); }, 25);
        });

        // set up the diagnostics refresh buttons
        $(".diagnosticData a").click(function(ev) {
            ev.preventDefault();
            getDiagnostics($(this).parents(".diagnosticData"));
        });

        // load diagnostics for each item
        $(".diagnosticData").each(function() { getDiagnostics($(this)); });

        // update firmware notices
        updateFirmwareNotices();
    };

    // get the current device list
    var getDeviceList = function(forceUpdate)
    {
        // check for updates to cached data if desired
        if (forceUpdate)
            window.external.CheckForDeviceUpdates();

        // get the new device list, convert to js objects, and sort by PS unit number
        return eval(window.external.GetDeviceList()).sort(
            function(a, b) { return a.PinscapeUnitNum - b.PinscapeUnitNum; });
    };

    // open the Documents folder
    $("#showDocs").click(function(ev) {
        window.external.ShowDocsFolder();
        ev.preventDefault();
    });
    
    // click on the auto-download checkbox
    $("#ckAutoDownload").change(function() {
        // save the new setting
        var checked = $(this).prop("checked");
        window.external.SetOption("CheckForDownloads", checked ? "yes" : "no");
        
        // if it's checked, start an update check if we haven't done one before
        if (checked)
            window.external.CheckForDownloads(true);

        // show or hide the update status according to the enabled status
        $("#autoUpdateStatus").toggle(checked);
    });

    // initialize the auto-download checkbox
    $("#ckAutoDownload").prop(
        "checked",
        /^y/i.test(window.external.GetOption("CheckForDownloads")))
        .change();

    $("#autoUpdateRetry").click(function(ev) {
        ev.preventDefault();
        window.external.CheckForDownloads(false);
    });

    // set up the "restore hidden dialogs" button
    $("#restoreHiddenDialogs").click(function(ev) {
        ev.preventDefault();
        window.external.RestoreHiddenDialogs();
        alert("All of the hidden dialogs have been restored.");
    });

    // load/refresh the diagnostic data for a device
    function getDiagnostics(div)
    {
        div.hide();
        diagData = window.external.GetDiagnosticCounters(div.data("cpuid"));
        if (diagData != null && diagData != "")
        {
            diagData = eval(diagData);
            if (diagData.mainLoopIterTime)
            {
                div.find("span").html(
                    "Main loop iteration time: " + diagData.mainLoopIterTime + "us<br>"
                    + "Main loop checkpoints: "
                    +    $.map(diagData.mainLoopIterCheckpt, function(ele, idx) {
                             return "[" + idx + "] " + ele + "us"
                         }).join(", ") + "<br>"
                    + "Incoming message processing time: " + diagData.mainLoopMsgTime + "us<br>"
                    + "PWM update time: " + diagData.pwmUpdateTime + "us<br>"
                    + "LedWiz flash update time: " + diagData.lwFlashUpdateTime + "us<br>"
                    + "Plunger scan time: " + diagData.plungerScanTime + "us<br>");
                div.show();
            }
        }
    }

    // Show the initial device list.  Force an update in case we've made configuration
    // changes since we cached the list.
    showDevList(getDeviceList(true));

    // periodically check for device list updates 
    setInterval(function()
    {
        // Only check if we're in the foreground.  This avoids unwanted
        // USB traffic generated from our queries while other applications
        // might be using the device(s).  The queries are particularly
        // problematic if another app is trying to use the joystick input,
        // since our query messages go through the joystick interface and
        // generated joystick data that looks random to unaware apps.
        if (window.external.IsInForeground())
        {
            // check for a new list, and redraw if there are changes
            if (window.external.CheckForDeviceUpdates())
                showDevList(getDeviceList(false));
        }
        
    }, 3000);
});

// progress updates (called from C# host via InvokeScript())
function downloadStatus(stat)
{
    if (stat)
    {
        // update the status message
        stat = eval(stat);
        if (stat.message)
            $("#autoUpdateStatus > span").html(stat.message);
        $("#autoUpdateRetry").toggle(stat.done);

        // if the check is done, update the update availability notifier
        if (stat.done)
            checkForUpdates();
    }
}

</script>

</body>
</html>
